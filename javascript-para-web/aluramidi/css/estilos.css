/*

  Criado variáveis para todas as cores e alguns elementos globais.

*/
:root {
  --color-0: #000;
  --color-1: #fff;
  --color-2: #666;
  --color-3: #aaa;
  --color-4: #ccc;
  --color-5: #eee;
  --color-6: #af303f;
  --color-7: #e93d50;
  --color-8: #23538a;
  --color-9: #a7cfdf;
  --color-10: #e5ff00;
  --tecla-size: 90px;
  --radius: calc(var(--tecla-size) / 3);
  --spacing: calc(var(--radius) / 3);
}

/*

  Removido reset customizado da Alura e adicionado aqui regra global do box-sizing.

*/
* {
  box-sizing: border-box;
}

/*

  Alterado font-size para facilitar a leitura e entendimento dos
  valores de rem 1rem = 10px, 1.6rem = 16px, 3.2rem = 32px, ...

*/
html {
  font-size: 10px;
}

/*

  Removido propriedades que podem ser reaproveitadas em outros
  elementos através do uso de classes dinâmicas como ferramenta.

*/
body {
  font-family: 'Montserrat', sans-serif;
  min-height: 100vh;
}

/*

  Classe de CSS dinãmina permite que suas propriedades possam ser
  alteradas comforme o contexto (escopo) de onde são aplicadas.

  Isso é possível devido a função do CSS var() que faz a invocação
  da variável CSS, e que permite um valor e um fallback
  var([valor], [fallback]). Isso faz com que quando o valor não é encontrado
  ou declarado em seu contexto a função use o valor de fallback.

  Para este uso recomendo como nome da variável usar uma sigla que
  identifique a propriedade. Isso no final faz com que o CSS gerado seja
  mais leve aumentando a performance.

*/
.flex {
  align-items: var(--ali, center);
  display: var(--dp, flex);
  flex-direction: var(--fd, column);
  justify-content: var(--jc, center);
}

/*

  Neste caso os pontos de acesso desta classe dinâmica não são as
  propriedades, mas valores dentro da função CSS linear-gradient()
  isso faz com que seja possível alterar o gradiente, apenas
  declarando as variáveis no escopo que que a classe esta aplicada.
  Neste caso a classe .aluramidi esta sobrescrevendo os valores de
  .gradient, o ideal seria fazer isso através de um seletor mais
  forte criando o escopo pela classe de componente ex.:

  .meu-componente .gradient {
    --gradient-direction: to bottom;
    --gradient-first-color: var(--color-5);
    --gradient-last-color: var(--color-4);
  }

  Ou neste caso específico o seletor seria desta forma, pois a classe
  dinâmica esta aplicada junto da classe do componente.

  .aluramidi.gradient {
    --gradient-direction: to bottom;
    --gradient-first-color: var(--color-5);
    --gradient-last-color: var(--color-4);
  }

  Isso evitaria bug possiveis bugs.

*/
.gradient {
  background-image: linear-gradient(var(--gradient-direction, 45deg), var(--gradient-first-color, var(--color-9)) 0%, var(--gradient-last-color, var(--color-8)) 100%);
}

/*

  Foi criado uma classe para o titulo principal e uma segunda camada
  de variável de componente para acessar as variáveis globais. Desta
  forma trona-se possível, neste caso, customizar a cor deste átomo
  através de sobrecarga de escopo alterando o valor da variável de
  componente sem alterar as variaveis globais ex.:

  .meu-componente .main-title {
    --main-title-color: var(--color-0);
  }

  .meu-componente .main-title.red {
    --main-title-color: var(--color-6);
  }

  Isso já seria o suficiente para se criar uma variação de aplicação
  do átomo .main-title dentro de outro escopo alterando apenas a
  variável do componente.

*/
.main-title {
  --main-title-color: var(--color-1);
  color: var(--main-title-color);
  font-size: 3.2rem;
  margin-bottom: 20px;
}

/*

  No elemento HTML esta aplicado a classe dinâmica .gradient junto
  da .aluramidi .isso dá acesso a classe .aluramidi configurar as
  variáveis de .gradient alterando seu comportamento. Apesar disto
  ser possível, é mais seguro fazer através do escopo de uma classe
  de componente.

*/
.aluramidi {
  --gradient-direction: to bottom;
  --gradient-first-color: var(--color-5);
  --gradient-last-color: var(--color-4);
  --first-shadow: var(--color-2);
  --second-shadow: var(--color-0);
  border-radius: var(--radius);
  box-shadow: 6px 8px 0 6px var(--first-shadow), 10px 10px 10px var(--second-shadow);
  display: grid;
  gap: var(--spacing);
  grid-template-columns: repeat(3, 1fr);
  padding: var(--spacing);
}

/*

  Neste átomo foram criadas variáveis que alteram estados como hover,
  active e focus. --bgc-d se lê background-color-default, poderia se usar
  os nomes em sua versão extendida, mas o uso de siglas para os nomes das
  propriedades vai ter um grande inpacto no peso do CSS final.

*/
.tecla {
  --bgc-d: var(--color-1);
  --bgc-a: var(--color-7);
  --bgc: var(--bgc-d);
  --bsd-d: 3px 3px 0 var(--color-3);
  --bsd-a: 3px 3px 0 var(--color-6) inset;
  --bsd-hf: 1px 1px 10px var(--color-10);
  --bsd-ahf: var(--bsd-a), var(--bsd-hf);
  --bsd: var(--bsd-d);
  --c-d: var(--color-7);
  --c-a: var(--color-1);
  --c: var(--c-d);
  background-color: var(--bgc);
  border-radius: var(--radius);
  border-color: var(--bgc);
  border-style: solid;
  border-width: 4px;
  box-shadow: var(--bsd);
  color: var(--c);
  cursor: pointer;
  font-family: inherit;
  font-size: calc(var(--spacing) * 2);
  font-weight: bold;
  height: var(--tecla-size);
  line-height: var(--tecla-size);
  text-align: center;
  transition-duration: var(--tsd, .25s);
  transition-property: background-color, border-color, color;
  transition-timing-function: ease;
  width: var(--tecla-size);
}

.tecla:focus {
  outline: 0;
}

/*

  Note que os nos estados abaixo não são deficnidas as propriedades,
  aqui são feitas as conexões das váriáveis de propriedades com as
  variáveis de estado. E as configurações dos estados ficam todas
  no mesmo lugar facilitando a alteração.

  Neste caso não foi criado uma variável de estado para o
  transition-duration, mas foi feito de forma que o valor possa ser
  customizado se necessário, o que acontece logo abaixo no estado
  active do elemento.

*/
.tecla:is(:active, .ativa) {
  --bgc: var(--bgc-a);
  --bsd: var(--bsd-a);
  --c: var(--c-a);
  --tsd: .15s;
}

.tecla:is(:hover, :focus) {
  --bsd: var(--bsd-hf);
}

.tecla:is(:active:hover, .ativa:hover, :active:focus, .ativa:focus){
  --bsd: var(--bsd-ahf);
}
